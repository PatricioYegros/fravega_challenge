// Code generated by MockGen. DO NOT EDIT.
// Source: ./orders_repository.go
//
// Generated by this command:
//
//	mockgen -source=./orders_repository.go -destination=./mocks/orders_repository.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	models "challenge_pyegros/app/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOrdersRepository is a mock of OrdersRepository interface.
type MockOrdersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersRepositoryMockRecorder
	isgomock struct{}
}

// MockOrdersRepositoryMockRecorder is the mock recorder for MockOrdersRepository.
type MockOrdersRepositoryMockRecorder struct {
	mock *MockOrdersRepository
}

// NewMockOrdersRepository creates a new mock instance.
func NewMockOrdersRepository(ctrl *gomock.Controller) *MockOrdersRepository {
	mock := &MockOrdersRepository{ctrl: ctrl}
	mock.recorder = &MockOrdersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrdersRepository) EXPECT() *MockOrdersRepositoryMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrdersRepository) CreateOrder(order models.Order) (*models.ResponseCreate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", order)
	ret0, _ := ret[0].(*models.ResponseCreate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrdersRepositoryMockRecorder) CreateOrder(order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrdersRepository)(nil).CreateOrder), order)
}

// GetOrderByFilters mocks base method.
func (m *MockOrdersRepository) GetOrderByFilters(filters models.Filters) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByFilters", filters)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByFilters indicates an expected call of GetOrderByFilters.
func (mr *MockOrdersRepositoryMockRecorder) GetOrderByFilters(filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByFilters", reflect.TypeOf((*MockOrdersRepository)(nil).GetOrderByFilters), filters)
}

// GetOrderByID mocks base method.
func (m *MockOrdersRepository) GetOrderByID(orderID int64) (*models.ResponseGet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", orderID)
	ret0, _ := ret[0].(*models.ResponseGet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockOrdersRepositoryMockRecorder) GetOrderByID(orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockOrdersRepository)(nil).GetOrderByID), orderID)
}

// UpdateEventOrder mocks base method.
func (m *MockOrdersRepository) UpdateEventOrder(orderID int64, event models.Event) (*models.ResponseUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventOrder", orderID, event)
	ret0, _ := ret[0].(*models.ResponseUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEventOrder indicates an expected call of UpdateEventOrder.
func (mr *MockOrdersRepositoryMockRecorder) UpdateEventOrder(orderID, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventOrder", reflect.TypeOf((*MockOrdersRepository)(nil).UpdateEventOrder), orderID, event)
}
